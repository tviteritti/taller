{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\");\n\nvar constants_1 = require(\"./constants\");\n\nvar RawSha256_1 = require(\"./RawSha256\");\n\nvar util_utf8_browser_1 = require(\"@aws-sdk/util-utf8-browser\");\n\nvar Sha256 =\n/** @class */\nfunction () {\n  function Sha256(secret) {\n    this.hash = new RawSha256_1.RawSha256();\n\n    if (secret) {\n      this.outer = new RawSha256_1.RawSha256();\n      var inner = bufferFromSecret(secret);\n      var outer = new Uint8Array(constants_1.BLOCK_SIZE);\n      outer.set(inner);\n\n      for (var i = 0; i < constants_1.BLOCK_SIZE; i++) {\n        inner[i] ^= 0x36;\n        outer[i] ^= 0x5c;\n      }\n\n      this.hash.update(inner);\n      this.outer.update(outer); // overwrite the copied key in memory\n\n      for (var i = 0; i < inner.byteLength; i++) {\n        inner[i] = 0;\n      }\n    }\n  }\n\n  Sha256.prototype.update = function (toHash) {\n    if (isEmptyData(toHash) || this.error) {\n      return;\n    }\n\n    try {\n      this.hash.update(convertToBuffer(toHash));\n    } catch (e) {\n      this.error = e;\n    }\n  };\n  /* This synchronous method keeps compatibility\n   * with the v2 aws-sdk.\n   */\n\n\n  Sha256.prototype.digestSync = function () {\n    if (this.error) {\n      throw this.error;\n    }\n\n    if (this.outer) {\n      if (!this.outer.finished) {\n        this.outer.update(this.hash.digest());\n      }\n\n      return this.outer.digest();\n    }\n\n    return this.hash.digest();\n  };\n  /* The underlying digest method here is synchronous.\n   * To keep the same interface with the other hash functions\n   * the default is to expose this as an async method.\n   * However, it can sometimes be useful to have a sync method.\n   */\n\n\n  Sha256.prototype.digest = function () {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      return tslib_1.__generator(this, function (_a) {\n        return [2\n        /*return*/\n        , this.digestSync()];\n      });\n    });\n  };\n\n  return Sha256;\n}();\n\nexports.Sha256 = Sha256;\n\nfunction bufferFromSecret(secret) {\n  var input = convertToBuffer(secret);\n\n  if (input.byteLength > constants_1.BLOCK_SIZE) {\n    var bufferHash = new RawSha256_1.RawSha256();\n    bufferHash.update(input);\n    input = bufferHash.digest();\n  }\n\n  var buffer = new Uint8Array(constants_1.BLOCK_SIZE);\n  buffer.set(input);\n  return buffer;\n}\n\nfunction isEmptyData(data) {\n  if (typeof data === \"string\") {\n    return data.length === 0;\n  }\n\n  return data.byteLength === 0;\n}\n\nfunction convertToBuffer(data) {\n  if (typeof data === \"string\") {\n    return util_utf8_browser_1.fromUtf8(data);\n  }\n\n  if (ArrayBuffer.isView(data)) {\n    return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);\n  }\n\n  return new Uint8Array(data);\n}","map":{"version":3,"sources":["D:/taller/node_modules/@aws-crypto/sha256-js/build/jsSha256.js"],"names":["Object","defineProperty","exports","value","tslib_1","require","constants_1","RawSha256_1","util_utf8_browser_1","Sha256","secret","hash","RawSha256","outer","inner","bufferFromSecret","Uint8Array","BLOCK_SIZE","set","i","update","byteLength","prototype","toHash","isEmptyData","error","convertToBuffer","e","digestSync","finished","digest","__awaiter","__generator","_a","input","bufferHash","buffer","data","length","fromUtf8","ArrayBuffer","isView","byteOffset","BYTES_PER_ELEMENT"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar constants_1 = require(\"./constants\");\nvar RawSha256_1 = require(\"./RawSha256\");\nvar util_utf8_browser_1 = require(\"@aws-sdk/util-utf8-browser\");\nvar Sha256 = /** @class */ (function () {\n    function Sha256(secret) {\n        this.hash = new RawSha256_1.RawSha256();\n        if (secret) {\n            this.outer = new RawSha256_1.RawSha256();\n            var inner = bufferFromSecret(secret);\n            var outer = new Uint8Array(constants_1.BLOCK_SIZE);\n            outer.set(inner);\n            for (var i = 0; i < constants_1.BLOCK_SIZE; i++) {\n                inner[i] ^= 0x36;\n                outer[i] ^= 0x5c;\n            }\n            this.hash.update(inner);\n            this.outer.update(outer);\n            // overwrite the copied key in memory\n            for (var i = 0; i < inner.byteLength; i++) {\n                inner[i] = 0;\n            }\n        }\n    }\n    Sha256.prototype.update = function (toHash) {\n        if (isEmptyData(toHash) || this.error) {\n            return;\n        }\n        try {\n            this.hash.update(convertToBuffer(toHash));\n        }\n        catch (e) {\n            this.error = e;\n        }\n    };\n    /* This synchronous method keeps compatibility\n     * with the v2 aws-sdk.\n     */\n    Sha256.prototype.digestSync = function () {\n        if (this.error) {\n            throw this.error;\n        }\n        if (this.outer) {\n            if (!this.outer.finished) {\n                this.outer.update(this.hash.digest());\n            }\n            return this.outer.digest();\n        }\n        return this.hash.digest();\n    };\n    /* The underlying digest method here is synchronous.\n     * To keep the same interface with the other hash functions\n     * the default is to expose this as an async method.\n     * However, it can sometimes be useful to have a sync method.\n     */\n    Sha256.prototype.digest = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                return [2 /*return*/, this.digestSync()];\n            });\n        });\n    };\n    return Sha256;\n}());\nexports.Sha256 = Sha256;\nfunction bufferFromSecret(secret) {\n    var input = convertToBuffer(secret);\n    if (input.byteLength > constants_1.BLOCK_SIZE) {\n        var bufferHash = new RawSha256_1.RawSha256();\n        bufferHash.update(input);\n        input = bufferHash.digest();\n    }\n    var buffer = new Uint8Array(constants_1.BLOCK_SIZE);\n    buffer.set(input);\n    return buffer;\n}\nfunction isEmptyData(data) {\n    if (typeof data === \"string\") {\n        return data.length === 0;\n    }\n    return data.byteLength === 0;\n}\nfunction convertToBuffer(data) {\n    if (typeof data === \"string\") {\n        return util_utf8_browser_1.fromUtf8(data);\n    }\n    if (ArrayBuffer.isView(data)) {\n        return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);\n    }\n    return new Uint8Array(data);\n}\n"]},"metadata":{},"sourceType":"script"}