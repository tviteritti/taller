{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Sha256 = void 0;\n\nvar tslib_1 = require(\"tslib\");\n\nvar constants_1 = require(\"./constants\");\n\nvar RawSha256_1 = require(\"./RawSha256\");\n\nvar util_1 = require(\"@aws-crypto/util\");\n\nvar Sha256 =\n/** @class */\nfunction () {\n  function Sha256(secret) {\n    this.hash = new RawSha256_1.RawSha256();\n\n    if (secret) {\n      this.outer = new RawSha256_1.RawSha256();\n      var inner = bufferFromSecret(secret);\n      var outer = new Uint8Array(constants_1.BLOCK_SIZE);\n      outer.set(inner);\n\n      for (var i = 0; i < constants_1.BLOCK_SIZE; i++) {\n        inner[i] ^= 0x36;\n        outer[i] ^= 0x5c;\n      }\n\n      this.hash.update(inner);\n      this.outer.update(outer); // overwrite the copied key in memory\n\n      for (var i = 0; i < inner.byteLength; i++) {\n        inner[i] = 0;\n      }\n    }\n  }\n\n  Sha256.prototype.update = function (toHash) {\n    if ((0, util_1.isEmptyData)(toHash) || this.error) {\n      return;\n    }\n\n    try {\n      this.hash.update((0, util_1.convertToBuffer)(toHash));\n    } catch (e) {\n      this.error = e;\n    }\n  };\n  /* This synchronous method keeps compatibility\n   * with the v2 aws-sdk.\n   */\n\n\n  Sha256.prototype.digestSync = function () {\n    if (this.error) {\n      throw this.error;\n    }\n\n    if (this.outer) {\n      if (!this.outer.finished) {\n        this.outer.update(this.hash.digest());\n      }\n\n      return this.outer.digest();\n    }\n\n    return this.hash.digest();\n  };\n  /* The underlying digest method here is synchronous.\n   * To keep the same interface with the other hash functions\n   * the default is to expose this as an async method.\n   * However, it can sometimes be useful to have a sync method.\n   */\n\n\n  Sha256.prototype.digest = function () {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {\n      return (0, tslib_1.__generator)(this, function (_a) {\n        return [2\n        /*return*/\n        , this.digestSync()];\n      });\n    });\n  };\n\n  return Sha256;\n}();\n\nexports.Sha256 = Sha256;\n\nfunction bufferFromSecret(secret) {\n  var input = (0, util_1.convertToBuffer)(secret);\n\n  if (input.byteLength > constants_1.BLOCK_SIZE) {\n    var bufferHash = new RawSha256_1.RawSha256();\n    bufferHash.update(input);\n    input = bufferHash.digest();\n  }\n\n  var buffer = new Uint8Array(constants_1.BLOCK_SIZE);\n  buffer.set(input);\n  return buffer;\n}","map":{"version":3,"sources":["D:/taller/node_modules/@aws-crypto/sha256-browser/node_modules/@aws-crypto/sha256-js/build/jsSha256.js"],"names":["Object","defineProperty","exports","value","Sha256","tslib_1","require","constants_1","RawSha256_1","util_1","secret","hash","RawSha256","outer","inner","bufferFromSecret","Uint8Array","BLOCK_SIZE","set","i","update","byteLength","prototype","toHash","isEmptyData","error","convertToBuffer","e","digestSync","finished","digest","__awaiter","__generator","_a","input","bufferHash","buffer"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Sha256 = void 0;\nvar tslib_1 = require(\"tslib\");\nvar constants_1 = require(\"./constants\");\nvar RawSha256_1 = require(\"./RawSha256\");\nvar util_1 = require(\"@aws-crypto/util\");\nvar Sha256 = /** @class */ (function () {\n    function Sha256(secret) {\n        this.hash = new RawSha256_1.RawSha256();\n        if (secret) {\n            this.outer = new RawSha256_1.RawSha256();\n            var inner = bufferFromSecret(secret);\n            var outer = new Uint8Array(constants_1.BLOCK_SIZE);\n            outer.set(inner);\n            for (var i = 0; i < constants_1.BLOCK_SIZE; i++) {\n                inner[i] ^= 0x36;\n                outer[i] ^= 0x5c;\n            }\n            this.hash.update(inner);\n            this.outer.update(outer);\n            // overwrite the copied key in memory\n            for (var i = 0; i < inner.byteLength; i++) {\n                inner[i] = 0;\n            }\n        }\n    }\n    Sha256.prototype.update = function (toHash) {\n        if ((0, util_1.isEmptyData)(toHash) || this.error) {\n            return;\n        }\n        try {\n            this.hash.update((0, util_1.convertToBuffer)(toHash));\n        }\n        catch (e) {\n            this.error = e;\n        }\n    };\n    /* This synchronous method keeps compatibility\n     * with the v2 aws-sdk.\n     */\n    Sha256.prototype.digestSync = function () {\n        if (this.error) {\n            throw this.error;\n        }\n        if (this.outer) {\n            if (!this.outer.finished) {\n                this.outer.update(this.hash.digest());\n            }\n            return this.outer.digest();\n        }\n        return this.hash.digest();\n    };\n    /* The underlying digest method here is synchronous.\n     * To keep the same interface with the other hash functions\n     * the default is to expose this as an async method.\n     * However, it can sometimes be useful to have a sync method.\n     */\n    Sha256.prototype.digest = function () {\n        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {\n            return (0, tslib_1.__generator)(this, function (_a) {\n                return [2 /*return*/, this.digestSync()];\n            });\n        });\n    };\n    return Sha256;\n}());\nexports.Sha256 = Sha256;\nfunction bufferFromSecret(secret) {\n    var input = (0, util_1.convertToBuffer)(secret);\n    if (input.byteLength > constants_1.BLOCK_SIZE) {\n        var bufferHash = new RawSha256_1.RawSha256();\n        bufferHash.update(input);\n        input = bufferHash.digest();\n    }\n    var buffer = new Uint8Array(constants_1.BLOCK_SIZE);\n    buffer.set(input);\n    return buffer;\n}\n"]},"metadata":{},"sourceType":"script"}